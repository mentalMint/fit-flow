import runtime;
import ds/array;
import ds/tree;

inds(a : [int], m : int) -> [Pair<int, int>] {
    pairs : [Pair<int, int>] = [];
    foldi(a, pairs, \i, pairs1, value1 ->
        foldi(a, pairs1, \j, pairs2, value2 ->
            if (value1 + value2 == m && i >= j) {
                arrayPush(pairs2, Pair(j, i))
            } else {
                pairs2;
            }
        )
    );
}

indsTree(array : [int], m : int) -> [Pair<int, int>] {
    tree : Tree = foldi(array, makeTree(), \i, t, value -> 
            setTree(t, value, arrayPush(getTreeArrayValue(t, value), i)));
    foldi(array, [], \i, pairs, a_i ->
        switch (lookupTree(tree, m - a_i)) {
            Some(ind): 
                    fold(ind, pairs, \pairs2, value -> 
                        if (value >= i) {
                             arrayPush(pairs2, Pair(i, value));
                        } else { 
                            pairs2;
                        });
            None(): pairs;
        });
}

main() {
    a = [4, 5, 6, 4, 5, 8, 12, 0, -1, 8, 123, 4];
    println(inds(a, 8));
    println(indsTree(a, 8));
    quit(0);
}