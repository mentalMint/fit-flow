import lingo/pegcode/driver;
import math/math;

export {
	Expr ::= Const, Var, BinOp, Log, Null;
	BinOp(name : string, left: Expr, right: Expr);
	Var(name : string);
	Const(value : double);
	Log(ex : Expr);
	Null();
    calculate(ex : Expr, variables : Tree<string, double>) -> double;
    infixToString(ex : Expr) -> string;
    parse(source : string) -> Expr;
	simplify(ex : Expr) -> Expr;
}

containsVar(ex: Expr, x : Expr) -> bool {
	switch (ex) {
		BinOp(name, l, r): containsVar(l, x) || containsVar(r, x);

		Log(ex2): containsVar(ex2, x);

		default:
			if (ex == x) {
				true;
			} else {
				false;
			}
	}
}

takeDerivative(ex : Expr, x : Expr) -> Expr {
	switch (ex) {
		BinOp(name, l, r):
			if (name == "+") {
				BinOp("+", takeDerivative(l, x), takeDerivative(r, x));
			} else if (name == "-") {
				BinOp("-", takeDerivative(l, x), takeDerivative(r, x));
			} else if (name == "*") {
				BinOp("+", BinOp("*", takeDerivative(l, x), r), BinOp("*", l, takeDerivative(r, x)));
			} else if (name == "/") {
				BinOp("/", BinOp("-", BinOp("*", takeDerivative(l, x), r), BinOp("*", l, takeDerivative(r, x))), BinOp("^", r, Const(2.0)));
			} else if (name == "^") {
				if (containsVar(l, x)) {
					if (!containsVar(r, x)) {
						BinOp("*", BinOp("*", r, BinOp("^", l, BinOp("-", r, Const(1.0)))), takeDerivative(l, x));
					} else {
						Null();
					}
				} else {
					BinOp("*", BinOp("*", BinOp("^", l, r), Log(l)), takeDerivative(r, x));
				}
			} else {
				takeDerivative(takeDerivative(l, r), r);
			}

		Log(ex2): BinOp("*", BinOp("/", Const(1.0), ex2), takeDerivative(ex2, x));

		default:
			if (ex == x) {
				Const(1.0);
			} else {
				Const(0.0);
			}
	}
}

calculate(ex : Expr, variables : Tree<string, double>) {
	switch(ex)
	{
		Const(c): c;

		Var(name): 
			switch (lookupTree(variables, name)) {
            	Some(num): num;
            	None(): 0.0;
			}

		Log(ex2): log(calculate(ex2, variables));
		
		BinOp(name, l, r):
			if (name == "+") {
				calculate(l, variables) + calculate(r, variables);
			} else if (name == "*") {
				calculate(l, variables) * calculate(r, variables);
			} else if (name == "-") {
				calculate(l, variables) - calculate(r, variables);
			} else if (name == "/") {
				calculate(l, variables) / calculate(r, variables);
			} else if (name == "^") {
				dpow(calculate(l, variables), calculate(r, variables));
			} else if (name == "'") {
				calculate(takeDerivative(l, r), variables);
			} else {
				0.0;
			}
		
		Null(): 0.0;
	}
}

equals(l : Expr, r : Expr) -> bool {
	switch (l) {
		BinOp(name1, l1, r1): {
			if (name1 == "+") {
				switch (r) {
					BinOp(name2, l2, r2):
						if (name2 == "+" && ((equals(l1, l2) && equals(r1, r2)) || (equals(l1, r2) && equals(r1, l2)))) {
							true;
						} else {
							false;
						}
					default: false;
				}
			} else if (name1 == "*") {
				switch (r) {
					BinOp(name2, l2, r2):
						if (name2 == "*" && ((equals(l1, l2) && equals(r1, r2)) || (equals(l1, r2) && equals(r1, l2)))) {
							true;
						} else {
							false;
						}
					default: false;
				}
			} else {
				if (l == r) {
					true;
				} else {
					false;
				}
			}
		}
		default:
			switch (r) {
				default:
					if (l == r) {
						true;
					} else {
						false;
					}
			}
	}
}

infixToString(ex : Expr) {
	switch(ex) {
		Const(c): d2s(c);
		Var(name): name;
		Log(ex2): "log" + infixToString(ex2);
		BinOp(name, l, r):
			if (name == "+") {
				"(" + infixToString(l) + " + " + infixToString(r) + ")";
			} else if (name == "*") { 
				"(" + infixToString(l) + " * " + infixToString(r) + ")";
			} else if (name == "/") { 
				"(" + infixToString(l) + " / " + infixToString(r) + ")";
			} else if (name == "^") { 
				"(" + infixToString(l) + "^" + infixToString(r) + ")";
			} else if (name == "'") { 
				"d/d" + infixToString(r) + " " + infixToString(l);
			} else { 
				"(" + infixToString(l) + " - " + infixToString(r) + ")";
			}
		Null(): "Null";
	}
}

simplify(ex : Expr) {
	simp_ex = switch(ex) {
		BinOp(name, l, r):
			if (name == "+") {
				simp_l = simplify(l);
				simp_r = simplify(r);
				if (simp_l == Const(0.0)) {
					simp_r;
				} else if (simp_r == Const(0.0)) {
					simp_l;
				} else if (equals(simp_l, simp_r)) {
					BinOp("*", Const(2.0), simp_l);
				} else if (simp_l.structname == "BinOp" && simp_r.structname == "BinOp") {
					switch (simp_l) {
						BinOp(name1, l1, r1):
							switch (simp_r) {
								BinOp(name2, l2, r2):
									if (name1 == "*" && name2 == "*") {
										if (equals(l1, l2)) {
											BinOp("*", l1, BinOp("+", r1, r2));
										} else if ( equals(r1, r2)) {
											BinOp("*", r1, BinOp("+", l1, l2));
										} else if ( equals(l1, r2)) {
											BinOp("*", l1, BinOp("+", r1, l2));
										} else if ( equals(r1, l2)) {
											BinOp("*", r1, BinOp("+", l1, r2));
										} else {
											BinOp(name, simp_l, simp_r);
										}
									} else {
										BinOp(name, simp_l, simp_r);
									}
								default: BinOp(name, simp_l, simp_r);
							}
						default: BinOp(name, simp_l, simp_r);
					}
				} else {
					BinOp(name, simp_l, simp_r);
				}
			} else if (name == "*") {
				simp_l = simplify(l);
				simp_r = simplify(r);
				if (simp_l == Const(0.0) || simp_r == Const(0.0)) {
					Const(0.0);
				} else if (simp_l == Const(1.0)) {
					simp_r;
				} else if (simp_r == Const(1.0)) {
					simp_l;
				} else if (equals(simp_l, simp_r)) {
					BinOp("^", simp_l, Const(2.0));
				} else {
					BinOp(name, simp_l, simp_r);
				}
			} else if (name == "/") {
				simp_l = simplify(l);
				simp_r = simplify(r);
				if (simp_l == Const(0.0)) {
					Const(0.0);
				} elseif (equals(simp_l, simp_r)) {
					Const(1.0);
				} else {
					BinOp(name, simp_l, simp_r);
				}
			} else if (name == "^") {
				simp_l = simplify(l);
				simp_r = simplify(r);
				if (simp_r == Const(0.0)) {
					Const(1.0);
				} else if (simp_l == Const(0.0)) {
					Const(0.0);
				} else {
					BinOp(name, simp_l, simp_r);
				}
			} else if (name == "'") {
				simplify(takeDerivative(l, r));
			} else {
				simp_l = simplify(l);
				simp_r = simplify(r);
				if (equals(simp_l, simp_r)) {
					Const(0.0);
				} else if (simp_r == Const(0.0)) {
					simp_l;
				} else {
					BinOp(name, simp_l, simp_r);
				}
			}

		Log(ex2): Log(simplify(ex2));

		default: ex;
	}
	
	if (simp_ex == ex) {
		simp_ex;
	} else {
		simplify(simp_ex);
	}
}

buildOp(xs : [flow]) {
	fold(xs[2], xs[1], \acc, x -> BinOp(xs[0], acc, x));
}

arithGrammarOp : ref Maybe<[PegOp]> = ref None();

arithGrammar() {
	// Prepare the grammar in the given file using flow syntax for inlining a string from a file
	// but be sure to only do this once
	onlyOnce(arithGrammarOp, \ -> {
		compilePegGrammar("#include infix_notation.lingo");
	});
}

parse(source: string) {
	specialPegActions = {
		t1 = setTree(defaultPegActions.t, "buildOp", buildOp);
		SemanticActions(t1);
	}
	parsic(arithGrammar(), source, specialPegActions);
}