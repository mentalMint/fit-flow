import nemo_parser/nemo_parser;
import vm_parser/vm_parser;

export {
    vmProgramToString(vmProgram : VMProgram) -> string;
    translate(program : Program) -> VMProgram;
}

translateAssign(assign : Assign) -> VMAssign {
    VMAssign(Int(0), assign.lvalue, assign.value, LabelSet([Int(1)]));
}

maxLabel(operators : [Operator]) -> int {
    fold(operators, 0, \acc, x -> {
        max1 : int = max(acc, x.label.val);
        switch (x) {
            VMAssign(l, lval, val, lSet): fold(lSet.labels, max1, \acc2, x2 -> {
                        max(acc2, x2.val);
                    }
                );

            VMIf(l, cond, lSet1, lSet2): {
                max2 : int = fold(lSet1.labels, max1, \acc2, x2 -> {
                        max(acc2, x2.val);
                    }
                );

                fold(lSet2.labels, max2, \acc2, x2 -> {
                        max(acc2, x2.val);
                    }
                );
            }

            End(l): max(l.val, max1);
        };
    });
}

changeLabel(operators : [Operator], oldLabel : int, newLabel : int) -> [Operator] {
    map(operators, \x -> {
        switch (x) {
            VMAssign(l, lval, val, lSet): {
                newL = \ -> {
                    if (l.val == oldLabel) {
                        Int(newLabel);
                    } else {
                        l;
                    }
                };                

                newLabels : [Int] = map(lSet.labels, \x2 -> {
                    if (x2.val == oldLabel) {
                        Int(newLabel);
                    } else {
                        x2;
                    }
                });

                newLSet : LabelSet = LabelSet(newLabels);
                VMAssign(newL(), lval, val, newLSet);
            }

            VMIf(l, cond, lSet1, lSet2): {
                newL = \ -> {
                    if (l.val == oldLabel) {
                        Int(newLabel);
                    } else {
                        l;
                    }
                }; 

                newLabels1 : [Int] = map(lSet1.labels, \x2 -> {
                    if (x2.val == oldLabel) {
                        Int(newLabel);
                    } else {
                        x2;
                    }
                });

                newLabels2 : [Int] = map(lSet2.labels, \x2 -> {
                    if (x2.val == oldLabel) {
                        Int(newLabel);
                    } else {
                        x2;
                    }
                });
                
                newLSet1 : LabelSet = LabelSet(newLabels1);
                newLSet2 : LabelSet = LabelSet(newLabels2);
                VMIf(newL(), cond, newLSet1, newLSet2);
            }

            End(l): {
                if (l.val == oldLabel) {
                        End(Int(newLabel));
                    } else {
                        x;
                    }
            }
        };
    });
}

translateBody(body : Body, startLabel : int) -> [Operator] {
    switch(body) {
        Assign(lvalue, value): {
            [VMAssign(Int(startLabel), lvalue, value, LabelSet([Int(startLabel + 1)]))];
        }
            
        Test(pred): {
            [VMIf(Int(startLabel), pred, LabelSet([Int(startLabel + 1)]), LabelSet([]))];
        }

        Sequence(lbody, rbody): {
            lop : [Operator] = translateBody(lbody, startLabel);
            concat(lop, translateBody(rbody, maxLabel(lop)));
        } 

        Choice(lbody, rbody): { 
            lop : [Operator] = translateBody(lbody, startLabel + 1);
            endl : int = maxLabel(lop);
            rop :  [Operator] = translateBody(rbody, endl);
            endr : int = maxLabel(rop);
            arr : [Operator] = concat(
                [
                    VMIf(Int(startLabel),
                    True(),
                    LabelSet([Int(startLabel + 1), Int(endl)]),
                    LabelSet([]))
                ],
                changeLabel(lop, endl, endr)
                );
            concat(arr, rop);
        }

        Iter(ibody): {
            iop : [Operator] = translateBody(ibody, startLabel + 1);
            endi : int = maxLabel(iop);
            newIop : [Operator] = changeLabel(iop, endi, startLabel);
            concat([VMIf(Int(startLabel), True(),
            LabelSet([Int(endi), Int(startLabel + 1)]), LabelSet([]))],
            newIop);
        }

        default: [];
    }
}

translate(program : Program) -> VMProgram {
    vmInitBody : InitBody = program.initBody;
    operators : [Operator] = translateBody(program.body[0], 0);
    end : int = maxLabel(operators);
    endOp : End = End(Int(end));
    vmProgram : VMProgram = VMProgram(vmInitBody, arrayPush(operators, endOp));
    vmProgram;
}


typeToString(type : Type) -> string {
    switch (type) {
        IntType(): "INT";
        ArrayType(type2): "[" + typeToString(type2) + "]";
    }
}

initToString(init : Init) {
    "VAR " + init.var.name + " : " + typeToString(init.type);
}

initBodyToString(initBody : InitBody) -> string {
    fold(initBody.inits, "", \acc, x -> acc + initToString(x) + "\n");
}

lvalueToString(lvalue : Lvalue) -> string {
    switch(lvalue) {
        Var(name): name;
    }
}

valueToString(value : Value) -> string {
    switch(value) {
        Array(vals): arrayToString(value);
        Int(val): exprToString(value);
		Var(name): exprToString(value);
		BinOp(name, l, r): exprToString(value);
        App(var, idx): exprToString(value);
        Upd(var, idx, val): "UPD(" + var.name + ", " + valueToString(idx) + ", " + valueToString(val) + ")";
        None(): "None";
    }
}

arrayToString(array : Array) -> string {
    fold(array.vals, "[", \acc, x -> acc + " " + valueToString(x)) + " ]";
}

labelSetToString(lSet : LabelSet) -> string {
    if (length(lSet.labels) == 0) {
        "âˆ…"
    } else {
        fold(lSet.labels, "{", \acc, x -> acc + " " + toString(x.val)) + " }";
    }
}

exprToString(expr : Expr) -> string {
    switch(expr) {
        Int(val): i2s(val);
		Var(name): name;
		BinOp(name, l, r):
			if (name == "+") {
				"(" + valueToString(l) + " + " + valueToString(r) + ")";
			} else if (name == "*") { 
				"(" + valueToString(l) + " * " + valueToString(r) + ")";
			} else if (name == "/") { 
				"(" + valueToString(l) + " / " + valueToString(r) + ")";
			} else if (name == "^") { 
				"(" + valueToString(l) + "^" + valueToString(r) + ")";
			} else if (name == "'") { 
				"d/d" + valueToString(r) + " " + valueToString(l);
			} else { 
				"(" + valueToString(l) + " - " + valueToString(r) + ")";
			}
        App(var, idx): "APP(" + var.name + ", " + valueToString(idx) + ")";
    }
}

conditionToString(cond : Cond) -> string {
    switch(cond) {
        Pred(expr1, expr2, name): exprToString(expr1) + " " + name + " " + exprToString(expr2);
        Not(cond2): "NOT " + conditionToString(cond2);
        True(): "true";
        False(): "false";
    }
}

operatorToString(operator : Operator) -> string {
    switch(operator) {
        VMAssign(label, lvalue, val, lset): toString(label.val) + ": " +
         lvalueToString(lvalue) + " := " + valueToString(val) + " goto " + labelSetToString(lset);
        VMIf(label, cond, lset1, lset2):  toString(label.val) + ": if " +
         conditionToString(cond) + " then " + labelSetToString(lset1) + " else " + labelSetToString(lset2);
        End(label): toString(label.val) + ":";
    }
}

operatorsToString(operators : [Operator]) -> string {
    fold(operators, "", \acc, x -> acc + operatorToString(x) + "\n");
}

vmProgramToString(vmProgram : VMProgram) -> string {
    initBodyToString(vmProgram.initBody) + "\n" +
    operatorsToString(vmProgram.operators) + "\n";
}

// main() {
// 	path = getUrlParameter("path");
// 	program : Program = parseNemo(getFileContent(path));
//     vmProgram = translate(program);
//     println(vmProgram);
//     println(vmProgramToString(vmProgram));
// 	quit(0);
// }
