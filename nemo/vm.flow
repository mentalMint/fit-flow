import vm_parser/vm_parser;
import translator;
import math/math;

// Integers ::= Tree<Var, int>;
// Arrays ::= Tree<Var, [flow]>;

variablesIntoTree(initBody : InitBody) -> Tree<Var, Type> {
    inits : [Init] = initBody.inits;
    fold(inits, makeTree(), \tree, variable -> {setTree(tree, variable.var, variable.type)});
}

operatorsIntoTree(operators : [Operator]) -> Tree<int, Operator> {
    fold(operators, makeTree(), \tree, operator -> {setTree(tree, operator.label.val, operator)});
}

calculateValue(val : Value, varTypes : Tree<Var, Type>, varVals : Tree<Var, Value>) -> Maybe<Value> {
	switch(val) {
		Array(vals): 
			Some(Array(map(vals, \x -> 
				switch(calculateValue(x, varTypes, varVals)){
					Some(v): v;
					None(): None();
				}))
			);

		Upd(array, indexExpr, valueExpr): 
			switch (lookupTree(varVals, array)) {
				Some(arr): {
					index = calculate(indexExpr, varTypes, varVals);
					value = calculateValue(valueExpr, varTypes, varVals);
					switch(index) {
						Some(i):
							switch(value) {
								Some(v): {
									Some(Array(replace(arr.vals, i, v)));
								}

								None(): None();
							}
						
						None(): None();
					}
				}
				None(): None();
			}

		None(): None();

		Expr(): 
			switch(calculate(val, varTypes, varVals)) {
				Some(num): Some(Int(num));
				None(): None();
			}
	}
}

calculate(ex : Expr, varTypes : Tree<Var, Type>, varVals : Tree<Var, Value>) -> Maybe<int> {
	switch(ex) {
		Int(c): Some(c);

		Var(name): {
			switch(
				switch (lookupTree(varTypes, ex)) {
					Some(t): 
						switch (t) {
							IntType(): Some(ex);
							default: None();
						}

					None(): None();
				}
			) {
				Some(var):
					switch (lookupTree(varVals, var)) {
						Some(val): 
							switch(val) {
								Int(num): Some(num);
								default: None();
							}

						None(): None();
					}

				None(): None();
			}		
		}
	
		BinOp(name, l, r):
			if (name == "+") {
				switch(calculate(l, varTypes, varVals)) {
					Some(left):
						switch(calculate(r, varTypes, varVals)) {
							Some(right): Some(left + right);
							None(): None();
						}

					None(): None();
				}
			} else if (name == "*") {
				switch(calculate(l, varTypes, varVals)) {
					Some(left):
						switch(calculate(r, varTypes, varVals)) {
							Some(right): Some(left * right);
							None(): None();
						}

					None(): None();
				}
			} else if (name == "-") {
				switch(calculate(l, varTypes, varVals)) {
					Some(left):
						switch(calculate(r, varTypes, varVals)) {
							Some(right): Some(left - right);
							None(): None();
						}

					None(): None();
				}
			} else if (name == "/") {
				switch(calculate(l, varTypes, varVals)) {
					Some(left):
						switch(calculate(r, varTypes, varVals)) {
							Some(right): Some(left / right);
							None(): None();
						}

					None(): None();
				}
			} else {
				None();
			}

		App(array, indexExpr): {
			switch (lookupTree(varVals, array)) {
				Some(arr): {
					index = calculate(indexExpr, varTypes, varVals);
					switch(index) {
						Some(i): {
							elem = elementAt(arr.vals, i, None());
							switch(elem) {
								Int(num): Some(num);
								default: None();
							}
						}

						None(): None();
					}
				}

				None(): None();
			}
		}
	}
}

checkCondition(cond : Cond, varTypes : Tree<Var, Type>, varVals : Tree<Var, Value>) -> int {
	switch(cond) {
		Not(pred): (checkCondition(pred, varTypes, varVals) + 1) % 2;
		
		Pred(expr1, expr2, name): {
			switch(calculate(expr1, varTypes, varVals)) {
				Some(left):
					switch(calculate(expr2, varTypes, varVals)) {
						Some(right): {
							if (name == "=") {
								if (left == right) {
									1;
								} else {
									0;
								}
							} else if (name == "!=") {
								if (left != right) {
									1;
								} else {
									0;
								}
							} else if (name == ">") {
								if (left > right) {
									1;
								} else {
									0;
								}
							} else if (name == "<") {
								if (left < right) {
									1;
								} else {
									0;
								}
							} else if (name == ">=") {
								if (left >= right) {
									1;
								} else {
									0;
								}
							} else if (name == "<=") {
								if (left <= right) {
									1;
								} else {
									0;
								}
							} else {
								-1;
							}
						}

						None(): -1; 
					}

				None(): -1; 
			}			
		}
		
		True(): 1;

		False(): 0;
	}
}

checkType(type : Type, val : Value) {
	switch(type) {
				IntType(): 
					switch(val) {
						Int(a): 1;
						None(): -1;
						default: 0;
					}

				ArrayType(subType):
					switch(val) {
						Array(vals): fold(vals, 1, \res, v -> {
								err = checkType(subType, v);
								if (err < res) {
									err;
								} else {
									res;
								}
							});
						Upd(arr, idx, newVal): checkType(subType, newVal); 
						None(): -1;
						Expr(): 0;
					}
			}
}

checkVarType(var : Var, varTypes : Tree<Var, Type>, val : Value) -> int {
	switch(lookupTree(varTypes, var)) {
		Some(type): checkType(type, val);
		None(): -1;
	} 
}

iteration = ref 0;
maxIterations : int = 100;

printError(message : string, varVals : Tree<Var, Value>) {
	printMemoryCondition("Error: " + message, varVals);
}

printMemoryCondition(message : string, varVals : Tree<Var, Value>) {
	println(varVals);
	println(message);
}

executeOperator(label : int, varTypes : Tree<Var, Type>,
				operators : Tree<int,Operator>,
				varVals : Tree<Var, Value>) -> Maybe<Tree<Var, Value>> {
	if (^iteration >= maxIterations) {
		Some(varVals);
	} else {
		iteration := ^iteration + 1;
		// println("Iteration " + i2s(^iteration));
		operator : Maybe<Operator> = lookupTree(operators, label);

		switch(operator) {
			Some(op): 
				switch(op) {
					End(l): {
						Some(varVals);
					}

					VMAssign(l, var, val, lSet): {
						newVal = switch(val) {
							default: 
								switch(calculateValue(val, varTypes, varVals)) {
									Some(v): Some(v);
									None(): None();
								}
							
							None(): None();
						}

						switch(newVal) {
							Some(v): {
								//need for checking type compatibility
								ret = checkVarType(var, varTypes, v);
								if (ret != 1) {
									printError("type incompatible", varVals);
									None();
								} else {
									newVarVals = setTree(varVals, var, v);
									if (length(lSet.labels) == 0) {
										printMemoryCondition("Abnormal end", varVals);
										Some(varVals);
										// None();
									} else {
										fold(lSet.labels, Some(newVarVals), \vars, lab -> {
											switch(vars) {
												Some(vars2): executeOperator(lab.val, varTypes, operators, vars2);
												None(): None();
											}
										});
									}
								}
							}

							None(): {
								printError("wrong value expression", varVals);
								None();
							}
						}
					}

					VMIf(l, cond, lSet1, lSet2): {
						condRes = checkCondition(cond, varTypes, varVals);
						if (condRes == 1) {
							if (length(lSet1.labels) == 0) {
								printMemoryCondition("Abnormal end", varVals);
								Some(varVals);
								// None();
							} else {
								fold(lSet1.labels, Some(varVals), \vars, lab -> {
										switch(vars) {
											Some(vars2): executeOperator(lab.val, varTypes, operators, vars2);
											None(): None();
										}
									}
								);
							}
						} else if (condRes == 0) {
							if (length(lSet2.labels) == 0) {
								printMemoryCondition("Abnormal end", varVals);
								Some(varVals);
								// None();
							} else {
								fold(lSet2.labels, Some(varVals), \vars, lab -> {
										switch(vars) {
											Some(vars2): executeOperator(lab.val, varTypes, operators, vars2);
											None(): None();
										}
									}
								);
							}
						} else {
							printError("wrong if condition", varVals);
							None();
						}
					}
				}

			None(): None();
		}
	}
}

execute(variables : Tree<Var, Type>, operators : Tree<int, Operator>) {
	varVals : Tree<Var, Value> = makeTree();
	varVals2 : Maybe<Tree<Var, Value>> = executeOperator(0, variables, operators, varVals);
	switch(varVals2) {
		Some(res): println(toString(res) + "\n");
		None(): println("");
	}
	println("Iterations " + i2s(^iteration) + "\n");
}

start(vmProgram : VMProgram) {
	variables : Tree<Var, Type> = variablesIntoTree(vmProgram.initBody);
	operators : Tree<int, Operator> = operatorsIntoTree(vmProgram.operators);
	execute(variables, operators);
}

main() {
	path = getUrlParameter("path");
	file = getFileContent(path);
	program = parseNemo(file);
	vmProgram = translate(program);
    println(vmProgramToString(vmProgram));

	// vmProgram : VMProgram = parseVM(file);

	start(vmProgram);
	quit(0);
}
